// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/orders/orders.go

// Package mock_orders is a generated GoMock package.
package mocks

import (
	context "context"
	entities "gomarket/internal/entities"
	errors "gomarket/internal/errors"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderRepository) CreateOrder(ctx context.Context, orderID, accountID string) *errors.ErrorApp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, orderID, accountID)
	ret0, _ := ret[0].(*errors.ErrorApp)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepositoryMockRecorder) CreateOrder(ctx, orderID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrder), ctx, orderID, accountID)
}

// GetOrderByID mocks base method.
func (m *MockOrderRepository) GetOrderByID(ctx context.Context, orderID string) (*entities.Order, *errors.ErrorApp) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, orderID)
	ret0, _ := ret[0].(*entities.Order)
	ret1, _ := ret[1].(*errors.ErrorApp)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderRepositoryMockRecorder) GetOrderByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderByID), ctx, orderID)
}

// GetOrderIDsForAccrual mocks base method.
func (m *MockOrderRepository) GetOrderIDsForAccrual(ctx context.Context) ([]string, *errors.ErrorApp) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderIDsForAccrual", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*errors.ErrorApp)
	return ret0, ret1
}

// GetOrderIDsForAccrual indicates an expected call of GetOrderIDsForAccrual.
func (mr *MockOrderRepositoryMockRecorder) GetOrderIDsForAccrual(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderIDsForAccrual", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderIDsForAccrual), ctx)
}

// GetOrdersByAccountID mocks base method.
func (m *MockOrderRepository) GetOrdersByAccountID(ctx context.Context, accountID string) ([]entities.Order, *errors.ErrorApp) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByAccountID", ctx, accountID)
	ret0, _ := ret[0].([]entities.Order)
	ret1, _ := ret[1].(*errors.ErrorApp)
	return ret0, ret1
}

// GetOrdersByAccountID indicates an expected call of GetOrdersByAccountID.
func (mr *MockOrderRepositoryMockRecorder) GetOrdersByAccountID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByAccountID", reflect.TypeOf((*MockOrderRepository)(nil).GetOrdersByAccountID), ctx, accountID)
}

// UpdateAfterAccrual mocks base method.
func (m *MockOrderRepository) UpdateAfterAccrual(ctx context.Context, orderID, status string, points float64) *errors.ErrorApp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAfterAccrual", ctx, orderID, status, points)
	ret0, _ := ret[0].(*errors.ErrorApp)
	return ret0
}

// UpdateAfterAccrual indicates an expected call of UpdateAfterAccrual.
func (mr *MockOrderRepositoryMockRecorder) UpdateAfterAccrual(ctx, orderID, status, points interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAfterAccrual", reflect.TypeOf((*MockOrderRepository)(nil).UpdateAfterAccrual), ctx, orderID, status, points)
}
