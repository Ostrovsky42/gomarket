// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/withdraws/withdraw.go

// Package mock_withdraws is a generated GoMock package.
package mocks

import (
	context "context"
	entities "gomarket/internal/entities"
	errors "gomarket/internal/errors"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWithDrawRepository is a mock of WithDrawRepository interface.
type MockWithDrawRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWithDrawRepositoryMockRecorder
}

// MockWithDrawRepositoryMockRecorder is the mock recorder for MockWithDrawRepository.
type MockWithDrawRepositoryMockRecorder struct {
	mock *MockWithDrawRepository
}

// NewMockWithDrawRepository creates a new mock instance.
func NewMockWithDrawRepository(ctrl *gomock.Controller) *MockWithDrawRepository {
	mock := &MockWithDrawRepository{ctrl: ctrl}
	mock.recorder = &MockWithDrawRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithDrawRepository) EXPECT() *MockWithDrawRepositoryMockRecorder {
	return m.recorder
}

// CreateWithdraw mocks base method.
func (m *MockWithDrawRepository) CreateWithdraw(ctx context.Context, accountID, orderID string, points float64) *errors.ErrorApp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdraw", ctx, accountID, orderID, points)
	ret0, _ := ret[0].(*errors.ErrorApp)
	return ret0
}

// CreateWithdraw indicates an expected call of CreateWithdraw.
func (mr *MockWithDrawRepositoryMockRecorder) CreateWithdraw(ctx, accountID, orderID, points interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdraw", reflect.TypeOf((*MockWithDrawRepository)(nil).CreateWithdraw), ctx, accountID, orderID, points)
}

// GetWithdraw mocks base method.
func (m *MockWithDrawRepository) GetWithdraw(ctx context.Context, accountID string) ([]entities.Withdraw, *errors.ErrorApp) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdraw", ctx, accountID)
	ret0, _ := ret[0].([]entities.Withdraw)
	ret1, _ := ret[1].(*errors.ErrorApp)
	return ret0, ret1
}

// GetWithdraw indicates an expected call of GetWithdraw.
func (mr *MockWithDrawRepositoryMockRecorder) GetWithdraw(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdraw", reflect.TypeOf((*MockWithDrawRepository)(nil).GetWithdraw), ctx, accountID)
}

// GetWithdrawSum mocks base method.
func (m *MockWithDrawRepository) GetWithdrawSum(ctx context.Context, accountID string) (*float64, *errors.ErrorApp) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawSum", ctx, accountID)
	ret0, _ := ret[0].(*float64)
	ret1, _ := ret[1].(*errors.ErrorApp)
	return ret0, ret1
}

// GetWithdrawSum indicates an expected call of GetWithdrawSum.
func (mr *MockWithDrawRepositoryMockRecorder) GetWithdrawSum(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawSum", reflect.TypeOf((*MockWithDrawRepository)(nil).GetWithdrawSum), ctx, accountID)
}
